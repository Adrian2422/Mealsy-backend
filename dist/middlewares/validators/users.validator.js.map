{"version":3,"sources":["../../../src/middlewares/validators/users.validator.js"],"names":["req","res","next","data","validData","body","username","email","age","permissions","password","User","findOne","$or","user","push","length","includes","passRegex","test","engravedData","status","send","validateUser"],"mappings":"kUAAA,iD;AACA,sC;;AAEe,mBAA4BA,GAA5B,EAAiCC,GAAjC,EAAsCC,IAAtC;AACPC,gBADO,GACA,EADA;AAEPC,qBAFO,GAEK,EAFL;AAG2CJ,gBAAIK,IAH/C,EAGLC,QAHK,aAGLA,QAHK,EAGKC,KAHL,aAGKA,KAHL,EAGYC,GAHZ,aAGYA,GAHZ,EAGiBC,WAHjB,aAGiBA,WAHjB,EAG8BC,QAH9B,aAG8BA,QAH9B;AAIMC,8BAAKC,OAAL,CAAa,EAAEC,KAAK,CAAC,EAACP,UAAUA,QAAX,EAAD,EAAuB,EAACC,OAAOA,KAAR,EAAvB,CAAP,EAAb,CAJN,SAIPO,IAJO;AAKb,gBAAG,CAACA,IAAJ,EAAS;AACP;AACAX,mBAAKG,QAAL,GAAgBA,QAAhB;AACAF,wBAAUW,IAAV,CAAeT,SAASU,MAAT,IAAmB,CAAlC;AACA;AACAb,mBAAKI,KAAL,GAAaA,KAAb;AACAH,wBAAUW,IAAV,CAAe,wBAAQR,KAAR,CAAf;AACA;AACAJ,mBAAKK,GAAL,GAAWA,GAAX;AACAJ,wBAAUW,IAAV,CAAeP,MAAM,EAAN,IAAY,OAAOA,GAAP,KAAe,QAA1C;AACA;AACAL,mBAAKM,WAAL,GAAmBA,WAAnB;AACAL,wBAAUW,IAAV,CAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAaE,QAAb,CAAsBR,WAAtB,CAAf;AACA;AACAN,mBAAKO,QAAL,GAAgBA,QAAhB;AACMQ,uBAfC,GAeW,wEAfX;AAgBPd,wBAAUW,IAAV,CAAeG,UAAUC,IAAV,CAAeT,QAAf,CAAf;AACA;AACAV,kBAAIoB,YAAJ,GAAmBhB,UAAUa,QAAV,CAAmB,KAAnB,IAA4B,EAA5B,gBAAsCd,IAAtC,CAAnB;AACAD;AACD,aApBD,MAoBO;AACLD,kBAAIoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,yEAArB;AACD,aA3BY,8D,YAAeC,Y,2DAAAA,Y","file":"users.validator.js","sourcesContent":["import User from '../../models/users.model';\r\nimport { isEmail } from 'validator'\r\n\r\nexport default async function validateUser(req, res, next) {\r\n  const data = {};\r\n  const validData = [];\r\n  const { username, email, age, permissions, password } = req.body;\r\n  const user = await User.findOne({ $or: [{username: username}, {email: email}]});\r\n  if(!user){\r\n    // validate name\r\n    data.username = username;\r\n    validData.push(username.length >= 8);\r\n    // validate email\r\n    data.email = email;\r\n    validData.push(isEmail(email));\r\n    // validate age\r\n    data.age = age;\r\n    validData.push(age > 13 || typeof age === 'number');\r\n    // validate permissions\r\n    data.permissions = permissions;\r\n    validData.push([1, 2, 3, 4].includes(permissions));\r\n    // validate password\r\n    data.password = password;\r\n    const passRegex = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%* #+=?&])[A-Za-z\\d$@$!%* #+=?&]{8,}$/;\r\n    validData.push(passRegex.test(password));\r\n    // check if any validation was failed\r\n    req.engravedData = validData.includes(false) ? {} : { ...data };\r\n    next();\r\n  } else {\r\n    res.status(409).send('User with this username/email already exist! Please insert unused data!');\r\n  }\r\n}\r\n"]}