{"version":3,"sources":["../src/app.js"],"names":["dotenv","config","path","mongoose","connect","dbConfig","mongoUrl","useNewUrlParser","useUnifiedTopology","useCreateIndex","Promise","global","connection","on","err","console","log","process","exit","app","set","__dirname","use","express","static","bodyParser","urlencoded","extended","json","notFound","catchErrors","listen","server","port"],"mappings":"aAAA,gC;;;AAGA,kC;AACA;AACA,yC;AACA;AACA,yC;AACA,6C;AACA,6C;AACA,+C;AACA,+C;AACA,8C;AACA,kD;AACA,4C;AACA,wD;;;AAGA,6C;AACA,oC,gJAlBAA,iBAAOC,MAAP,CAAc,EAACC,MAAM,MAAP,EAAd,E,CAgBA;;AAIA;AACA;;AAEAC,mBAASC,OAAT,CAAiBC,mBAASC,QAA1B,EAAoC;AAClCC,qBAAiB,IADiB;AAElCC,wBAAoB,IAFc;AAGlCC,oBAAgB,IAHkB,EAApC;;AAKAN,mBAASO,OAAT,GAAmBC,OAAOD,OAA1B;AACAP,mBAASS,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,UAACC,GAAD,EAAS;AACrCC,YAAQC,GAAR,CAAY,mDAAZ;AACAC,YAAQC,IAAR;AACH,CAHD;;AAKA,IAAMC,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACAD,IAAIC,GAAJ,CAAQ,OAAR,EAAiB,gBAAKC,SAAL,EAAgB,OAAhB,CAAjB;AACAF,IAAIG,GAAJ,CAAQC,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAL,IAAIG,GAAJ,CAAQG,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAR,IAAIG,GAAJ,CAAQG,qBAAWG,IAAX,EAAR;AACAT,IAAIG,GAAJ,CAAQ,6BAAR;;AAEA;AACAH,IAAIG,GAAJ,CAAQ,MAAR,EAAgB,qBAAhB;AACAH,IAAIG,GAAJ,CAAQ,MAAR,EAAgB,sBAAhB;AACAH,IAAIG,GAAJ,CAAQ,MAAR,EAAgB,wBAAhB;;AAEA;AACAH,IAAIG,GAAJ,CAAQO,gBAAR;AACAV,IAAIG,GAAJ,CAAQQ,mBAAR;;AAEA;AACAX,IAAIY,MAAJ,CAAW9B,iBAAO+B,MAAP,CAAcC,IAAzB,EAA+B,YAAM;AACjClB,YAAQC,GAAR,2BAAoCf,iBAAO+B,MAAP,CAAcC,IAAlD;AACH,CAFD","file":"app.js","sourcesContent":["import dotenv from 'dotenv';\r\ndotenv.config({path: '.env'});\r\n\r\nimport express from 'express';\r\nimport { join } from 'path';\r\nimport config from './config/config';\r\nimport { notFound, catchErrors } from './middlewares/errors';\r\nimport bodyParser from 'body-parser';\r\nimport cookieParser from 'cookie-parser';\r\nimport passport from './config/passport';\r\nimport register from 'babel-core/register';\r\nimport babelPolyfill from 'babel-polyfill';\r\nimport usersApi from './routes/users.routes';\r\nimport recipesApi from './routes/recipes.routes';\r\nimport authApi from './routes/auth.routes';\r\nimport userUtils from './controllers/users.controller';\r\n\r\n// Connect to database\r\nimport dbConfig from './config/database';\r\nimport mongoose from 'mongoose';\r\n\r\n// Configure passport\r\npassport();\r\n\r\nmongoose.connect(dbConfig.mongoUrl, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n  useCreateIndex: true\r\n});\r\nmongoose.Promise = global.Promise;\r\nmongoose.connection.on('error', (err) => {\r\n    console.log('Could not connect to the database. Exiting now...');\r\n    process.exit();\r\n});\r\n\r\nconst app = express();\r\n\r\napp.set('view engine', 'pug');\r\napp.set('views', join(__dirname, 'views'));\r\napp.use(express.static('public'));\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.json());\r\napp.use(cookieParser());\r\n\r\n// routes config\r\napp.use('/api', authApi());\r\napp.use('/api', usersApi());\r\napp.use('/api', recipesApi());\r\n\r\n// errors handling\r\napp.use(notFound);\r\napp.use(catchErrors);\r\n\r\n// let's play!\r\napp.listen(config.server.port, () => {\r\n    console.log(`Server is up on port ${config.server.port}!`);\r\n});\r\n"]}