{"version":3,"sources":["../../src/controllers/users.controller.js"],"names":["createUser","req","res","newData","body","bcrypt","genSalt","salt","hash","password","User","save","user","status","send","data","message","findAllUsers","sort_by","query","order_by","offset","parseInt","per_page","usersPromise","find","filters","skip","limit","sort","countPromise","countDocuments","Promise","all","users","count","findOneUser","next","findOne","_id","params","id","updateUser","username","email","age","permissions","deleteUser","deleteOne","deleteAllUsers","deleteMany"],"mappings":"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","file":"users.controller.js","sourcesContent":["import User from \"../models/users.model\";\r\nimport bcrypt from \"bcrypt\";\r\n\r\nexport default {\r\n   async createUser(req, res) {\r\n    const newData = req.body;\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hash = await bcrypt.hash(newData.password, salt);\r\n    newData.password = hash;\r\n    const user = await new User(newData).save();\r\n    return res.status(201).send({data: user, message: 'User was created!'});\r\n  },\r\n  \r\n  async findAllUsers(req, res) {\r\n    const sort_by = {};\r\n        sort_by[req.query.sort_by || 'createdAt'] = req.query.order_by || 'desc';\r\n        const offset = parseInt(req.query.offset) || 0;\r\n        const per_page = parseInt(req.query.per_page) || 2;\r\n        const usersPromise =\r\n        User.find(req.filters)\r\n            .skip(offset)\r\n            .limit(per_page)\r\n            .sort(sort_by);\r\n        const countPromise = User.countDocuments(req.filters);\r\n        const [users, count] = await Promise.all([usersPromise, countPromise]);\r\n        return res.status(200).send({ data: users, count });\r\n  },\r\n  \r\n  async findOneUser(req, res, next) {\r\n    const user = await User.findOne({_id: req.params.id});\r\n    if(!user){\r\n      return next();\r\n    } else {\r\n      return res.status(200).send({data: user});\r\n    }\r\n  },\r\n  \r\n  async updateUser(req, res, next){\r\n    const user = await User.findOne(req.id);\r\n    if(!user){\r\n      return next();\r\n    } else {\r\n      user.username = req.body.username;\r\n      user.password = req.body.password;\r\n      user.email = req.body.email;\r\n      user.age = req.body.age;\r\n      user.permissions = req.body.permissions;\r\n      await user.save();\r\n\r\n      return res.status(200).send({data: user, message: 'User was updated!'});\r\n    }\r\n  },\r\n  \r\n  async deleteUser(req, res, next) {\r\n      const user = await User.findOne(req.id);\r\n      if(!user){\r\n        return next();\r\n      } else {\r\n        await user.deleteOne();\r\n        res.status(200).send({message: \"User was removed!\"})\r\n      }\r\n  },\r\n\r\n  async deleteAllUsers(req, res) {\r\n    const users = await User.find().deleteMany({});\r\n    return res.status(200).send({message: \"Users were removed!\"})\r\n  },\r\n}\r\n"]}