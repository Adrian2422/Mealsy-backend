{"version":3,"sources":["../../src/controllers/recipes.controller.js"],"names":["createRecipe","req","res","engravedData","Object","keys","length","constructor","Recipe","save","recipe","status","send","data","message","body","findAllRecipes","sort_by","query","order_by","offset","parseInt","per_page","recipesPromise","find","skip","limit","sort","countPromise","countDocuments","Promise","all","recipes","count","findOneRecipe","next","findOne","_id","params","id","updateRecipe","name","tags","photo","ingredients","instructions","link","creator","toUpperCase","slice","split","forEach","item","key","push","amount","weight","unit","deleteOneRecipe","deleteOne","deleteAllRecipes","deleteMany"],"mappings":"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","file":"recipes.controller.js","sourcesContent":["import Recipe from \"../models/recipes.model\";\r\n\r\nexport default {\r\n   async createRecipe(req, res) {\r\n     const engravedData = req.engravedData;\r\n    if(Object.keys(engravedData).length > 0 && engravedData.constructor === Object){\r\n      const recipe = await new Recipe(engravedData).save();\r\n      return res.status(201).send({data: recipe, message: 'Recipe was created!'});\r\n    } else {\r\n      return res.status(422).send({data: req.body, message: 'Some data is invalid!'});\r\n    }\r\n  },\r\n  \r\n  async findAllRecipes(req, res) {\r\n    const sort_by = {};\r\n        sort_by[req.query.sort_by || 'createdAt'] = req.query.order_by || 'desc';\r\n        const offset = parseInt(req.query.offset) || 0;\r\n        const per_page = parseInt(req.query.per_page) || 2;\r\n        const recipesPromise =\r\n        Recipe.find()\r\n            .skip(offset)\r\n            .limit(per_page)\r\n            .sort(sort_by);\r\n        const countPromise = Recipe.countDocuments();\r\n        const [recipes, count] = await Promise.all([recipesPromise, countPromise]);\r\n        return res.status(200).send({ data: recipes, count });\r\n  },\r\n  \r\n  async findOneRecipe(req, res, next) {\r\n    const recipe = await Recipe.findOne({_id: req.params.id});\r\n    if(!recipe){\r\n      return next();\r\n    } else {\r\n      return res.status(200).send({data: recipe});\r\n    }\r\n  },\r\n  \r\n  async updateRecipe(req, res, next){\r\n    const recipe = await Recipe.findOne(req.id);\r\n    if(!recipe){\r\n      return next();\r\n    } else {\r\n      const { name, tags, photo, ingredients, instructions, link, creator } = req.body;\r\n      recipe.name = `${name[0].toUpperCase()}${name.slice(1)}`;\r\n      recipe.tags = tags.split(',');\r\n      recipe.photo = photo;\r\n      recipe.ingredients = [];\r\n      ingredients.forEach((item, key) => {\r\n        recipe.ingredients.push({\r\n        amount: item.amount,\r\n        name: item.name,\r\n        weight: item.weight,\r\n        unit: item.unit\r\n        });\r\n      });\r\n      recipe.instructions = instructions;\r\n      recipe.link = link;\r\n      recipe.creator = creator;\r\n\r\n      await recipe.save();\r\n      return res.status(200).send({data: recipe, message: 'Recipe was updated!'});\r\n    }\r\n  },\r\n  \r\n  async deleteOneRecipe(req, res, next) {\r\n      const recipe = await Recipe.findOne(req.id);\r\n      if(!recipe){\r\n        return next();\r\n      } else {\r\n        await recipe.deleteOne();\r\n        res.status(200).send({message: \"Recipe was removed!\"})\r\n      }\r\n  },\r\n\r\n  async deleteAllRecipes(req, res) {\r\n    const recipes = await Recipe.find().deleteMany({});\r\n    return res.status(200).send({message: \"Recipes were removed!\"})\r\n  },\r\n}\r\n"]}