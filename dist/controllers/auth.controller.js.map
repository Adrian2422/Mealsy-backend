{"version":3,"sources":["../../src/controllers/auth.controller.js"],"names":["register","req","res","next","engravedData","username","email","age","permissions","password","Object","keys","length","constructor","user","User","status","send","data","body","message","login","token","jwt","sign","id","_id","process","env","JWT_SECRET","expiresIn"],"mappings":"2EAAA,8C;AACA,4C;;AAEe;AACPA,UADO,oBACEC,GADF,EACOC,GADP,EACYC,IADZ,EACiB;AACtBC,0BADsB,GACPH,IAAIG,YADG;AAEpBC,sBAFoB,GAE4BD,YAF5B,CAEpBC,QAFoB,EAEVC,KAFU,GAE4BF,YAF5B,CAEVE,KAFU,EAEHC,GAFG,GAE4BH,YAF5B,CAEHG,GAFG,EAEEC,WAFF,GAE4BJ,YAF5B,CAEEI,WAFF,EAEeC,QAFf,GAE4BL,YAF5B,CAEeK,QAFf;AAGzBC,qBAAOC,IAAP,CAAYP,YAAZ,EAA0BQ,MAA1B,GAAmC,CAAnC,IAAwCR,aAAaS,WAAb,KAA6BH,MAH5C;AAIpBI,kBAJoB,GAIb,IAAIC,eAAJ,CAAS,EAACV,kBAAD,EAAWC,YAAX,EAAkBC,QAAlB,EAAuBC,wBAAvB,EAAT,CAJa;AAKpBO,gCAAKf,QAAL,CAAcc,IAAd,EAAoBL,QAApB,CALoB;AAMnBP,kBAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gDAArB,CANmB;;AAQnBf,kBAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,MAAMjB,IAAIkB,IAAX,EAAiBC,SAAS,uBAA1B,EAArB,CARmB;;AAU7B,GAXY;;AAaPC,OAbO,iBAaDpB,GAbC,EAaIC,GAbJ,EAaSC,IAbT,EAac;AACzB;AACMmB,mBAFmB,GAEXC,uBAAIC,IAAJ,CAAS,EAAEC,IAAIxB,IAAIa,IAAJ,CAASY,GAAf,EAAT,EAA+BC,QAAQC,GAAR,CAAYC,UAA3C,EAAuD,EAAEC,WAAW,IAAb,EAAvD,CAFW;AAGzB;AAHyB,gDAIlB5B,IAAIe,IAAJ,CAAS,EAAEK,YAAF,EAAT,CAJkB;AAK1B,GAlBY,E","file":"auth.controller.js","sourcesContent":["import User from '../models/users.model';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nexport default {\r\n  async register(req, res, next){\r\n    const engravedData = req.engravedData;\r\n    const { username, email, age, permissions, password } = engravedData;\r\n    if(Object.keys(engravedData).length > 0 && engravedData.constructor === Object){\r\n      const user = new User({username, email, age, permissions});\r\n      await User.register(user, password);\r\n      return res.status(201).send('User created successfully. Now you can log in.');\r\n    } else {\r\n      return res.status(422).send({data: req.body, message: 'Some data is invalid!'});\r\n    }\r\n  },\r\n\r\n  async login(req, res, next){\r\n    // generate token\r\n    const token = jwt.sign({ id: req.user._id }, process.env.JWT_SECRET, { expiresIn: 1200 });\r\n    // return token\r\n    return res.send({ token });\r\n  }\r\n}"]}